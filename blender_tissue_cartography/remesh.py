# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04b_remeshing.ipynb.

# %% auto 0
__all__ = ['subdivide_igl', 'make_delaunay']

# %% ../nbs/04b_remeshing.ipynb 2
from . import io as tcio
from . import wrapping as tcwrap
from . import smoothing as tcsmooth

import numpy as np
import igl

import warnings
import os

# %% ../nbs/04b_remeshing.ipynb 5
def subdivide_igl(mesh, reglue=True, decimals=None):
    """
    Refine mesh by edge subdivision using igl.
    
    Subdivides all edges by placing new vertices at edge midpoints. Preserves UV information,
    by cuts the mesh along seams and (optionally) glueing back after. New texture vertices
    are also placed at texture-edge midpoints.
    
    Parameters
    ----------
    mesh : ObjMesh
        Initial mesh.

    Returns
    -------
    mesh_subdiv : ObjMesh
        Subdivided mesh.
    reglue : bool
        Glue back after cutting
    decimals : int or None
        Decimal precision for merging vertices when regluing. If None, estimated from average
        edge mesh length as -4*log_10(avg length)
    """
    mesh_cut = mesh.cut_along_seams()
    new_vertices, new_faces = igl.upsample(mesh_cut.vertices, mesh_cut.tris, number_of_subdivs=1)
    new_texture_vertices, _ = igl.upsample(mesh_cut.texture_vertices, mesh_cut.tris, number_of_subdivs=1)
    mesh_subdiv = tcio.ObjMesh(vertices=new_vertices, texture_vertices=new_texture_vertices,
                               faces=[[[v,v] for v in fc] for fc in new_faces])
    mesh_subdiv.set_normals()
    if reglue:
        mesh_subdiv = tcio.glue_seams(mesh_subdiv, decimals=decimals)
    return mesh_subdiv

# %% ../nbs/04b_remeshing.ipynb 22
def make_delaunay(mesh):
    """
    Make mesh triangles less deformed by edge flips. 
    
    This algorithm improves mesh quality (i.e. makes triangles less deformed)
    without moving vertices by "edge flips" using the Delaunay algorithm.
    UV information is preserved by forbidding the flip of edges along the
    UV seams.
    
    Note that this algorithm can lead to self-overlap of the UV map.
    You can fix this using wrapping.smooth_laplacian_texture.
    
    Parameters
    ----------
    mesh : ObjMesh
        Initial mesh.

    Returns
    -------
    mesh_new : ObjMesh
        Mesh with flipped edges.
    """
    if mesh.only_vertices:
        l = igl.edge_lengths(mesh.vertices, mesh.tris)
        l_new, f_new = igl.intrinsic_delaunay_triangulation(l, mesh.tris)
        mesh_new = tcio.ObjMesh(vertices=mesh.vertices, faces=f_new)
        return mesh_new
    mesh_cut = mesh.cut_along_seams()
    l = igl.edge_lengths(mesh_cut.vertices, mesh_cut.tris)
    l_new, f_new = igl.intrinsic_delaunay_triangulation(l, mesh_cut.tris)
    mesh_new = tcio.ObjMesh(vertices=mesh_cut.vertices, normals=mesh_cut.normals,
                            texture_vertices=mesh_cut.texture_vertices,
                            faces=[[[v,v] for v in fc] for fc in f_new])
    mesh_new = tcio.glue_seams(mesh_new, decimals=None)
    return mesh_new
