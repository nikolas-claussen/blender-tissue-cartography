# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01c_interface_open3d.ipynb.

# %% auto 0
__all__ = ['convert_to_pymeshlab', 'convert_from_pymeshlab']

# %% ../nbs/01c_interface_open3d.ipynb 1
from . import io as tcio
import numpy as np
import pymeshlab

# %% ../nbs/01c_interface_open3d.ipynb 8
def convert_to_pymeshlab(mesh: tcio.ObjMesh) -> pymeshlab.Mesh:
    """
    Convert tcio.ObjMesh to pymeshlab.Mesh.
    
    See https://pymeshlab.readthedocs.io/en/latest/classes/mesh.html
    Note: normal information is recalculated by pymeshlab. Discards any non-triangle faces.
    """
    mesh.match_vertex_info(require_texture_normals=False)
    if np.isnan(mesh.matched_texture_vertices).any():
        return pymeshlab.Mesh(vertex_matrix=mesh.matched_vertices, face_matrix=mesh.tris)
    return pymeshlab.Mesh(vertex_matrix=mesh.matched_vertices, face_matrix=mesh.tris,
                          v_tex_coords_matrix=mesh.matched_texture_vertices.astype(np.float64))

# %% ../nbs/01c_interface_open3d.ipynb 14
def convert_from_pymeshlab(mesh: pymeshlab.pmeshlab.Mesh) -> pymeshlab.Mesh:
    """Convert pymeshlab mesh to ObjMesh."""
    vertices = mesh.vertex_matrix()
    faces = [[3*[v,] for v in f] for f in pymesh_ref.face_matrix()]
    normals = pymesh_ref.vertex_normal_matrix()
    normals = (normals.T / np.linalg.norm(normals, axis=-1)).T
    if mesh.has_vertex_tex_coord():
        return tcio.ObjMesh(vertices=vertices, faces=faces, normals=normals,
                            texture_vertices=mesh.vertex_tex_coord_matrix())
    return tcio.ObjMesh(vertices=vertices, faces=faces, normals=normals)
