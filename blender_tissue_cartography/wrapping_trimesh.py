# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03d_wrapping_trimesh.ipynb.

# %% auto 0
__all__ = ['shrinkwrap_trimesh']

# %% ../nbs/03d_wrapping_trimesh.ipynb 1
from . import io as tcio
from . import registration as tcreg
from . import interface_trimesh as inttrm

import numpy as np
from copy import deepcopy
import warnings
import trimesh

# %% ../nbs/03d_wrapping_trimesh.ipynb 22
def shrinkwrap_trimesh(mesh_source, mesh_target, n_iter_smooth_target=10, n_iter_smooth_wrapped=10):
    """
    Shrink-wrap the source mesh onto the target mesh using trimesh.
    
    Sets the vertex positions of mesh_source to the closes point on the surface of mesh_target (not necessarily
    a vertex). Optionally, smoothes the target mesh and the wrapped mesh for smoother results using a Taubin
    filter (recommended). Gives out a warning if the shrink-wrapping flips any vertex normals, which can
    indicate problems.
    
    The shrinkwrapped mesh still has the UV maps of the source mesh, and so can be used to compute
    cartographic projections.
    
    Parameters
    ----------
    mesh_source : tcio.ObjMesh
        Mesh to be deformed
    mesh_target : tcio.ObjMesh
        Mesh with target shape
    n_iter_smooth_target : int, default 10
        Taubin smoothing iterations for target
    n_iter_smooth_wrapped : int, default 10
        Taubin smoothing iterations for shrinkwrapped mesh, after shrinkwrapping

    Returns
    -------
    mesh_wrapped : tcio.ObjMesh

    """
    mesh_target_trimesh = inttrm.convert_to_trimesh(mesh_target)
    mesh_source_trimesh = inttrm.convert_to_trimesh(mesh_source)
    # taubin smoothing of target
    mesh_target_trimesh = trimesh.smoothing.filter_taubin(mesh_target_trimesh, iterations=n_iter_smooth_target)
    # shrink-wrap
    (closest_points, distances, _) = mesh_target_trimesh.nearest.on_surface(mesh_source_trimesh.vertices)
    mesh_source_trimesh.vertices = closest_points
    # taubin smoothing of wrapped source
    mesh_source_trimesh.vertices = trimesh.smoothing.filter_taubin(mesh_source_trimesh,
                                                                   iterations=n_iter_smooth_wrapped).vertices
    mesh_wrapped = inttrm.convert_from_trimesh(mesh_source_trimesh, reconstruct_texture_from_faces=True)
    # check if any normals were flipped
    dots = np.einsum("vi,vi->v", mesh_source.vertex_normals, mesh_wrapped.vertex_normals)
    if np.sum(dots < 0) > 0:
        warnings.warn(f"Warning: {np.sum(dots<0)} normal(s) flipped during shrink-wrapping")
    return mesh_wrapped
